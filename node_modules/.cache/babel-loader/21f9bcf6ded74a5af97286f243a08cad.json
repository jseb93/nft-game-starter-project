{"ast":null,"code":"var _jsxFileName = \"/home/guttermouth/dev/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport Arena from \"./Components/Arena\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport LoadignIndicator from \"./Components/LoadingIndicator\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // const checkEthereum = ()=>{\n  //   const {ethereum} = window;\n  //   if (!ethereum) {\n  //     return false;\n  //   }else{\n  //     return true;\n  //   }\n  // }\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const renderContent = () => {\n    if (isLoading) {}\n\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/yMocj5x.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this);\n    } else if (!characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT,\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n        const accounts = await ethereum.request({\n          method: \"eth_accounts\"\n        });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"no ethereum\");\n      } else {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(\"Connected\", accounts[0]);\n        setCurrentAccount(accounts[0]);\n        checkNetwork();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log(\"User has character NFT\", transformCharacterData(txn));\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n\n      setIsLoading(false);\n    };\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"WfKwg0DIevkC/Lp/DKpo5wNTmQM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/guttermouth/dev/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/App.js"],"names":["ethers","React","useEffect","useState","SelectCharacter","Arena","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","LoadignIndicator","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","isLoading","setIsLoading","renderContent","connectWalletAction","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"mappings":"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","sourcesContent":["import {ethers} from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport Arena from \"./Components/Arena\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport LoadignIndicator from \"./Components/LoadingIndicator\";\n\n\n// Constants\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst App = () => {\n  // const checkEthereum = ()=>{\n  //   const {ethereum} = window;\n  //   if (!ethereum) {\n  //     return false;\n  //   }else{\n  //     return true;\n  //   }\n  // }\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const renderContent = () => {\n    if (isLoading){\n      \n    }\n    if (!currentAccount){\n      return(\n        <div className=\"connect-wallet-container\">\n          <img src=\"https://i.imgur.com/yMocj5x.png\"/>\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet to Get Started\n        </button>\n        </div> \n      )\n    } else if(!characterNFT){\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else{\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT}/>\n    }\n  }\n\n  const checkNetwork = async () => {\n    try{\n      if(window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else{\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    }catch(error){\n      console.log(error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try{\n      const {ethereum} = window;\n      if(!ethereum){\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      }else{\n        console.log(\"We have the ethereum object\", ethereum);\n        const accounts = await ethereum.request({method: \"eth_accounts\"});\n        if(accounts.length!==0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        }\n        else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    }catch(error) {\n      console.log(error);\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try{\n      const {ethereum} = window;\n      if(!ethereum){\n        console.log(\"no ethereum\");\n      } else {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        console.log(\"Connected\", accounts[0]);\n        setCurrentAccount(accounts[0]);\n        checkNetwork();\n      }\n    }catch(error){\n      console.log(error);\n    }\n  }\n\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name){\n        console.log(\"User has character NFT\",transformCharacterData(txn));\n        setCharacterNFT(transformCharacterData(txn));\n      } else{\n        console.log(\"No character NFT found\");\n      }\n      setIsLoading(false);\n    };\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n        <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}